---
title: "Biostat 203B Homework 4"
subtitle: Due Mar 24 @ 11:59PM
author: Sylvia Wang, 105118268
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information:
```{r}
sessionInfo()
```
Load database libraries and the tidyverse frontend:
```{r}
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(tidymodels))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(GGally))
suppressPackageStartupMessages(library(gtsummary))
```

## Predicting 30-day mortality

Using the ICU cohort `icu_cohort.rds` you built in Homework 3, develop at least three analytic approaches for predicting the 30-day mortality of patients admitted to ICU using demographic information (gender, age, marital status, ethnicity), first lab measurements during ICU stay, and first vital measurements during ICU stay. For example, you can use (1) logistic regression with elastic net (lasso + ridge) penalty (e.g., glmnet or keras package), (2) random forest, (3) boosting, and (4) support vector machines, or (5) MLP neural network (keras package)

Data preparation:
Create a reduced dataset containing only demographic information (gender, age, marital status, ethnicity), first lab measurements during ICU stay, first vital measurements during ICU stay, and thirty day mortality indicator.
For lab and vital measurements, extreme outliers (those beyond the outer fence, i.e., +/-3*IQR) were reassigned as `NA`'s, because some obvious unrealistic values have been identified from the data (e.g. a negative heart rate or a heart rate of zero, etc.).
```{r}
icu_cohort <- readRDS("icu_cohort.rds") 
icu_cohort_reduced <- icu_cohort %>% 
  select("gender", "age_hadm", "marital_status", "ethnicity", "sodium",
         "chloride", "potassium", "bicarbonate", "hematocrit", "creatinine",
         "wbc_count", "glucose", "bp_systolic", "bp_mean", "resp_rate",
         "heart_rate", "temp", "thirty_day_mort") 

vars <- c("sodium", "chloride", "potassium", "bicarbonate", "hematocrit",
          "creatinine", "wbc_count", "glucose", "bp_systolic", "bp_mean", 
          "resp_rate", "heart_rate", "temp")
outlier_removed <- function(x){
    p25 <- quantile(x, probs = 0.25, na.rm=T)
    p75 <- quantile(x, probs = 0.75, na.rm=T)
    IQR <- p75 - p25
    x <- ifelse(x > p75 + 3 * IQR | x < p25 - 3 * IQR , NA, x)
}
lab_vital <- icu_cohort_reduced %>% 
  select(all_of(vars)) %>% 
  apply(2, outlier_removed)
icu_cohort_reduced[, colnames(lab_vital)] <- lab_vital
icu_cohort_reduced %>% tbl_summary(by = thirty_day_mort)
```

1. Partition data into 50% training set and 50% test set. Stratify partitioning according the 30-day mortality status.

```{r}
set.seed(203)

data_split <- initial_split(
  icu_cohort_reduced, 
  strata = "thirty_day_mort", 
  prop = 0.5)
data_split

train <- training(data_split)
dim(train)
test <- testing(data_split)
dim(test)
```

2. Train and tune the models using the training set.

```{r}
# Method 1: Logistic regression with elastic net regularization
# Recipe and Preprocessing
# (I did not impute the values because the missing values are minimal when 
# compared to the large sample size. Plus, the correct way to use the 
# imputation strategy is to run the models separately in multiple imputated 
# datasets and then combine the results such as through averaging and 
# obtaining the appropriate standard error. Considering the available time for 
# the purpose of hw4, if I were to impute I might just end up doing one 
# imputated dataset, which is not an appropriate approach in real life.)
sapply(icu_cohort_reduced, class)
logit_recipe <- recipe(thirty_day_mort ~ ., data = train) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_zv(all_numeric_predictors()) %>% 
  step_normalize(all_numeric_predictors()) %>%
  prep(training = train, retain = TRUE)
logit_recipe

logit_mod <- logistic_reg(penalty = tune(), mixture = tune()) %>% 
  set_engine("glmnet", standardize = FALSE)
logit_mod

# Bundle the recipe and model
logit_wf <- workflow() %>%
  add_recipe(logit_recipe) %>%
  add_model(logit_mod)
logit_wf

param_grid <- grid_regular(
  penalty(range = c(-6, 3)), 
  mixture(),
  levels = c(100, 5))

# Cross validation
set.seed(203)
folds <- vfold_cv(train, v = 5)
folds

system.time({
logit_fit <- logit_wf %>%
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )
})
logit_fit
```

3. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each model.



